generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  photo        String?
  email        String    @unique
  password     String
  type         String
  club_id      String
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("users")
}

model Club {
  id           String    @id @default(uuid())
  name         String
  photo        String?
  username     String    @unique
  balance      Float     @default(0)  
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())
  users        User[]
  clients      Client[]
  cashs        Cash[]
  tournaments  Tournament[]
  products     Product[]
  orders       Order[]
  transactions Transaction[]

  @@map("clubs")
}

model Client {
  id                 String    @id @default(uuid())
  name               String
  photo              String?   @default("") 
  chair              String?   @default("")
  phone_number       String?   @default("")
  cpf                String?   @default("")
  address            String?   @default("")
  credit             Float
  balance            Float
  club_id            String
  visible            Boolean   @default(true)
  observation        String?   @default("")
  club               Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at          DateTime? @default(now())
  update_at          DateTime? @default(now())
  transactions       Transaction[]
  orders             Order[]
  client_tournaments ClientTournament[]

  @@map("clients")
}

model Transaction {
  id           String    @id @default(uuid())
  type         String
  paid         Boolean
  value        Float
  method       String
  operation    String    @default("entrada")
  client_id    String
  observation  String?
  order_id     String?   @unique
  date_payment DateTime? @default(now())
  client       Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  club_id      String
  club         Club    @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("transactions")
}

model Cash {
  id           String    @id @default(uuid())
  name         String
  interval     Int 
  closed       Boolean 
  entrada      String
  recompra     Float
  balance      Float
  club_id      String
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("cashs")
}

model Tournament {
  id                     String    @id @default(uuid())
  name                   String
  intervals              String
  blinds                 String
  status                 String    @default("criado")
  buyin_value            Float
  buyin_token            Int
  rebuy_value            Float
  rebuy_token            Int
  rebuyDuplo_value       Float
  rebuyDuplo_token       Int
  addOn_value            Float
  addOn_token            Int
  timechip               Int
  chairs                 Int
  total_tokens           Int
  totalAward_guaranteed  Float
  totalAward_accumulated Float
  datetime_initial       DateTime? @default(now())
  award                  String?
  club_id                String
  club                   Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at              DateTime? @default(now())
  update_at              DateTime? @default(now())
  clients_tournament     ClientTournament[]

  @@map("tournaments")
}

model Product {
  id           String    @id @default(uuid())
  name         String
  amount       Int 
  value        Float
  photo        String?
  club_id      String
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("products")
}

model Order {
  id             String    @id @default(uuid())
  observation    String?
  value          Float
  client_id      String
  client         Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  club_id        String
  club           Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at      DateTime? @default(now())
  update_at      DateTime? @default(now())
  products_order ProductOrder[]

  @@map("orders")
}

model ClientTournament {
  id            String      @id @default(uuid())
  date_in       DateTime?   @default(now())
  date_out      DateTime?   @default(now())
  award         Float       @default(0)
  client_id     String
  exit          Boolean     @default(false)
  client        Client      @relation(fields: [client_id], references: [id], onDelete: Cascade)
  tournament_id String
  tournament    Tournament  @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  create_at     DateTime?   @default(now())
  update_at     DateTime?   @default(now())

  @@map("client_tournaments")
}

model ProductOrder {
  id           String    @id @default(uuid())
  name         String
  value        Float
  amount       Int
  order_id     String
  order        Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("product_orders")
}