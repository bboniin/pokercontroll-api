generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("admins")
}

model User {
  id           String    @id @default(uuid())
  name         String
  photo        String?
  email        String    @unique
  password     String
  type         String
  club_id      String
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("users")
}

model Club {
  id                 String    @id @default(uuid())
  name               String
  photo              String?
  username           String    @unique
  balance            Float     @default(0)  
  passport           Float     @default(0)  
  jackpot            Float     @default(0)  
  dealer             Float     @default(0)  
  access_cash        Boolean   @default(true)
  access_tournament  Boolean   @default(true)
  access_stock       Boolean   @default(true)
  access_order       Boolean   @default(true)
  access_report      Boolean   @default(true)
  access_users       Boolean   @default(true)
  create_at          DateTime? @default(now())
  update_at          DateTime? @default(now())
  users              User[]
  clients            Client[]
  cashs              Cash[]
  tournaments        Tournament[]
  products           Product[]
  orders             Order[]
  transactions       Transaction[]
  methods            Method[]
  categories         Category[]
  commands           Command[]
  stocks             Stock[]
  invoices           Invoice[]
  suppliers          Supplier[]

  @@map("clubs")
}

model Client {
  id                 String    @id @default(uuid())
  name               String
  photo              String?   @default("") 
  chair              String?   @default("")
  phone_number       String?   @default("")
  cpf                String?   @default("")
  address            String?   @default("")
  credit             Float
  debt               Float
  receive            Float
  club_id            String
  visible            Boolean   @default(true)
  observation        String?   @default("")
  club               Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at          DateTime? @default(now())
  update_at          DateTime? @default(now())
  transactions       Transaction[]
  orders             Order[]
  client_tournaments ClientTournament[]
  commands           Command[]

  @@map("clients")
}

model Transaction {
  id                  String    @id @default(uuid())
  type                String    @default("clube")
  paid                Boolean
  value               Float
  value_paid          Float
  operation           String    @default("entrada")
  client_id           String?
  sector_id           String? 
  observation         String?
  date_payment        DateTime? @default(now())
  client              Client?    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  club_id             String
  club                Club    @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at           DateTime? @default(now())
  update_at           DateTime? @default(now())

  methods_transaction MethodsTransaction[]
  items_transaction   ItemsTransaction[]

  @@map("transactions")
}

model ItemsTransaction {
  id              String    @id @default(uuid())
  name            String
  value           Float
  amount          Int 
  transaction_id  String
  transaction     Transaction      @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  create_at       DateTime? @default(now())
  update_at       DateTime? @default(now())

  @@map("items_transaction")
}

model Cash {
  id           String    @id @default(uuid())
  name         String
  closed       Boolean 
  club_id      String
  date_in      DateTime? @default(now())
  date_out     DateTime? @default(now())
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("cashs")
}

model Method {
  id           String    @id @default(uuid())
  name         String
  balance      Float
  identifier   String?  
  percentage   Float?     @default(0)
  club_id      String
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("methods")
}

model MethodsTransaction {
  id              String    @id @default(uuid())
  name            String
  percentage      Float 
  value           Float
  transaction_id  String
  transaction     Transaction      @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  create_at       DateTime? @default(now())
  update_at       DateTime? @default(now())

  @@map("methods_transaction")
}

model Category {
  id           String    @id @default(uuid())
  name         String
  club_id      String
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  products     Product[]

  @@map("categories")
}

model Supplier {
  id           String    @id @default(uuid())
  name         String
  club_id      String
  active       Boolean   @default(true)
  club         Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  products     Product[]
  invoices     Invoice[]

  @@map("suppliers")
}

model Stock {
  id           String     @id @default(uuid())
  name         String
  amount       Int
  cost_value   Float      @default(0)
  club_id      String
  club         Club       @relation(fields: [club_id], references: [id], onDelete: Cascade)
  invoice_id   String     
  invoice      Invoice    @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  create_at    DateTime?  @default(now())
  update_at    DateTime?  @default(now())

  @@map("stocks")
}

model Invoice {
  id           String     @id @default(uuid())
  identifier   String     
  observation  String?
  amount       Int
  value        Float      @default(0)
  club_id      String
  club         Club       @relation(fields: [club_id], references: [id], onDelete: Cascade)
  supplier_id  String
  supplier     Supplier   @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  create_at    DateTime?  @default(now())
  update_at    DateTime?  @default(now())

  stocks       Stock[]

  @@map("invoices")
}

model Tournament {
  id                        String    @id @default(uuid())
  name                      String
  intervals                 String
  blinds                    String
  status                    String    @default("criado")
  buyin_value               Float
  buyin_token               Int
  buyin                     Int       @default(0)
  enable_rebuy              Boolean   @default(true)
  rebuy_value               Float
  rebuy_token               Int
  rebuy                     Int       @default(0)
  enable_rebuyDuplo         Boolean   @default(true)
  rebuyDuplo_value          Float
  rebuyDuplo_token          Int
  rebuyDuplo                Int       @default(0)
  enable_addOn              Boolean   @default(true)
  addOn_value               Float
  addOn_token               Int
  addOn                     Int       @default(0)
  enable_super_addOn        Boolean   @default(true)
  super_addOn_value         Float     @default(0)
  super_addOn_token         Int       @default(0)
  super_addOn               Int       @default(0)
  timechip                  Int
  chairs                    Int
  total_tokens              Int
  is_rebuy                  Boolean   @default(true)
  rake                      Float     @default(0)
  staff                     Float     @default(0)
  max_buyin_free            Int       @default(0)
  max_timechip              Int       @default(0)
  max_in                    Int       @default(0)
  max_rebuy                 Int       @default(0)
  paused                    Boolean   @default(false)
  time_paused               DateTime? @default(now())
  seconds_paused            Int       @default(0)
  max_count                 Int       @default(0)
  show_max                  Boolean   @default(true)
  jackpot_value             Float     @default(0)
  passport_value            Float     @default(0)
  dealer_value              Float     @default(0)
  totalAward                Float     @default(0)
  totalAward_guaranteed     Float
  totalAward_accumulated    Float
  percentage_players_award  Float     @default(0)
  datetime_initial          DateTime? @default(now())
  datetime_max_buyin_free   DateTime? @default(now())
  datetime_max_in           DateTime? @default(now())
  datetime_max_timechip     DateTime? @default(now())
  award                     String?
  club_id                   String
  club                      Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at                 DateTime? @default(now())
  update_at                 DateTime? @default(now())
  clients_tournament        ClientTournament[]
  transactions_tournament   TransactionTournament[]
    
  @@map("tournaments")
}

model Product {
  id           String     @id @default(uuid())
  name         String
  amount       Int 
  value        Float
  cost_value   Float      @default(0)
  photo        String?
  club_id      String
  club         Club       @relation(fields: [club_id], references: [id], onDelete: Cascade)
  category_id  String?
  category     Category?  @relation(fields: [category_id], references: [id], onDelete: SetNull)
  supplier_id  String?    
  supplier     Supplier?  @relation(fields: [supplier_id], references: [id], onDelete: SetNull)
  create_at    DateTime?  @default(now())
  update_at    DateTime?  @default(now())

  @@map("products")
}

model Command {
  id             String    @id @default(uuid())
  observation    String?
  open           Boolean   @default(true)
  client_id      String
  client         Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  club_id        String
  club           Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at      DateTime? @default(now())
  update_at      DateTime? @default(now())

  products_order ProductOrder[]
  orders         Order[]

  @@map("commands")
}

model Order {
  id             String    @id @default(uuid())
  observation    String?
  value          Float
  client_id      String
  client         Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  command_id     String?    
  command        Command?   @relation(fields: [command_id], references: [id], onDelete: Cascade)
  club_id        String
  club           Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  create_at      DateTime? @default(now())
  update_at      DateTime? @default(now())
  products_order ProductOrder[]

  @@map("orders")
}

model TransactionTournament {
  id              String      @id @default(uuid())
  transaction_id  String
  rebuy           Int         @default(0)
  buyin           Int         @default(0)
  rebuyDuplo      Int         @default(0)
  addOn           Int         @default(0)
  super_addOn     Int         @default(0)
  tournament_id   String
  tournament      Tournament  @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  create_at       DateTime?   @default(now())
  update_at       DateTime?   @default(now())

  @@map("transactions_tournament")
}

model ClientTournament {
  id            String      @id @default(uuid())
  date_in       DateTime?   @default(now())
  date_out      DateTime?   @default(now())
  award         Float       @default(0)
  client_id     String
  rebuy         Int         @default(0)
  buyin         Int         @default(0)
  rebuyDuplo    Int         @default(0)
  addOn         Int         @default(0)
  super_addOn   Int         @default(0)
  dealer        Boolean     @default(false)
  passport      Boolean     @default(false)
  jackpot       Boolean     @default(false)
  exit          Boolean     @default(false)
  position      Int         @default(9999)
  client        Client      @relation(fields: [client_id], references: [id], onDelete: Cascade)
  tournament_id String
  tournament    Tournament  @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  create_at     DateTime?   @default(now())
  update_at     DateTime?   @default(now())

  @@map("client_tournaments")
}

model ProductOrder {
  id           String    @id @default(uuid())
  name         String
  value        Float
  amount       Int
  command_id   String?    
  command      Command?   @relation(fields: [command_id], references: [id], onDelete: Cascade)
  order_id     String
  order        Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  @@map("product_orders")
}
